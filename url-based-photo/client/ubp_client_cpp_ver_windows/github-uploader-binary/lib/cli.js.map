{"version":3,"sources":["../src/cli.js"],"names":["GENERAL_REGEX","IMGTAG_REGEX","parseTextareaValue","textareaValue","fileTexts","replace","split","map","fileText","regex","match","originalText","name","url","main","argv","v","version","_","console","log","process","exit","h","help","length","files","green","forEach","push","file","toString","e","error","slice","catch"],"mappings":";;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AAEA;;;;;;AAEA,MAAMA,gBAAgB,sBAAtB;AACA,MAAMC,eAAe,oCAArB;;AAEO,MAAMC,kDAAqBC,iBAAiB;AACjD,QAAMC,YAAYD,cAAcE,OAAd,CAAsB,KAAtB,EAA6B,EAA7B,EAAiCC,KAAjC,CAAuC,IAAvC,CAAlB;;AAEA,SAAOF,UAAUG,GAAV,CAAcC,YAAY;AAC/B,UAAMC,QAAQD,SAAS,CAAT,MAAgB,GAAhB,GAAsBR,aAAtB,GAAsCC,YAApD;;AAD+B,0BAGGO,SAASE,KAAT,CAAeD,KAAf,CAHH;AAAA;;AAAA,UAGxBE,YAHwB;AAAA,UAGVC,IAHU;AAAA,UAGJC,GAHI;;;AAK/B,WAAO;AACLF,kBADK;AAELC,UAFK;AAGLC;AAHK,KAAP;AAKD,GAVM,CAAP;AAWD,CAdM;;AAgBP,MAAMC;AAAA,6CAAO,WAAMC,IAAN,EAAc;AACzB,QAAIA,KAAKC,CAAL,IAAUD,KAAKE,OAAf,IAA0BF,KAAKG,CAAL,CAAO,CAAP,MAAc,SAA5C,EAAuD;AACrDC,cAAQC,GAAR,CAAY,kBAAIH,OAAhB;AACAI,cAAQC,IAAR,CAAa,CAAb;AACD;;AAED,QAAIP,KAAKQ,CAAL,IAAUR,KAAKS,IAAf,IAAuBT,KAAKG,CAAL,CAAO,CAAP,MAAc,MAArC,IAA+CH,KAAKG,CAAL,CAAOO,MAAP,KAAkB,CAArE,EAAwE;AACtE;AACAJ,cAAQC,IAAR,CAAa,CAAb;AACD;;AAED,QAAIP,KAAKG,CAAL,CAAOO,MAAP,KAAkB,CAAtB,EAAyB;AACvB,UAAI;AACFN,gBAAQC,GAAR,CAAY,EAAZ;;AAEA,cAAMjB,gBAAgB,MAAM,sBAAOY,KAAKG,CAAZ,CAA5B;AACA,cAAMQ,QAAQxB,mBAAmBC,aAAnB,CAAd;;AAEAgB,gBAAQC,GAAR,CAAa;;MAEb,gBAAMO,KAAN,CAAY,SAAZ,CAAuB;OAFvB;;AAKAD,cAAME,OAAN,CAAc,gBAAQ;AACpB,0BAAMC,IAAN,CAAW,CAACC,KAAKlB,IAAN,EAAYkB,KAAKjB,GAAjB,CAAX;AACD,SAFD;;AAIAM,gBAAQC,GAAR,CAAY,gBAAMW,QAAN,EAAZ;AACAZ,gBAAQC,GAAR,CAAY,EAAZ;AACD,OAjBD,CAiBE,OAAOY,CAAP,EAAU;AACVb,gBAAQc,KAAR,CAAcD,CAAd;AACD;AACF;;AAEDX,YAAQC,IAAR,CAAa,CAAb;AACD,GAnCK;;AAAA;AAAA;AAAA;AAAA,IAAN;;AAqCAR,KAAK,wBAASO,QAAQN,IAAR,CAAamB,KAAb,CAAmB,CAAnB,CAAT,CAAL,EAAsCC,KAAtC,CAA4ChB,QAAQc,KAApD;;kBAEenB,I","file":"cli.js","sourcesContent":["import minimist from 'minimist';\nimport chalk from 'chalk';\n\nimport help from './help';\nimport upload from './upload';\nimport pkg from '../package.json';\n\nimport table from './utils/table';\n\nconst GENERAL_REGEX = /[!]?\\[(.*)\\]\\((.*)\\)/;\nconst IMGTAG_REGEX = /[^<img].*alt=\"(.*)\" src=\"(.*)\"[>$]/;\n\nexport const parseTextareaValue = textareaValue => {\n  const fileTexts = textareaValue.replace(/\\n$/, '').split('\\n');\n\n  return fileTexts.map(fileText => {\n    const regex = fileText[0] !== '<' ? GENERAL_REGEX : IMGTAG_REGEX;\n\n    const [originalText, name, url] = fileText.match(regex);\n\n    return {\n      originalText,\n      name,\n      url,\n    };\n  });\n};\n\nconst main = async argv => {\n  if (argv.v || argv.version || argv._[0] === 'version') {\n    console.log(pkg.version);\n    process.exit(0);\n  }\n\n  if (argv.h || argv.help || argv._[0] === 'help' || argv._.length === 0) {\n    help();\n    process.exit(0);\n  }\n\n  if (argv._.length !== 0) {\n    try {\n      console.log('');\n\n      const textareaValue = await upload(argv._);\n      const files = parseTextareaValue(textareaValue);\n\n      console.log(`\n\n    ${chalk.green('Result:')}\n      `);\n\n      files.forEach(file => {\n        table.push([file.name, file.url]);\n      });\n\n      console.log(table.toString());\n      console.log('');\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  process.exit(0);\n};\n\nmain(minimist(process.argv.slice(2))).catch(console.error);\n\nexport default main;\n"]}